#!/bin/sh

#SBATCH --job-name=oracle
#SBATCH --output=oracle-%A.out  # Standard output of the script (Can be absolute or relative path). %A adds the job id to the file name so you can launch the same script multiple times and get different logging files
#SBATCH --error=oracle-%A.err  # Standard error of the script
#SBATCH --time=0-160:00:00  # Limit on the total run time (format: days-hours:minutes:seconds)
#SBATCH --gres=gpu:1  # Number of GPUs if needed
#SBATCH --cpus-per-task=8  # Number of CPUs (Don't use more than 24 per GPU)
#SBATCH --mem=96G  # Memory in GB (Don't use more than 126G per GPU), maybe 128?

# activate corresponding environment
# conda deactivate # If you launch your script from a terminal where your environment is already loaded, conda won't activate the environment. This guards against that. Not necessary if you always run this script from a clean terminal
source ~/miniconda3/etc/profile.d/conda.sh
conda activate oracle
# FLASH ATTN NEEDS TO BE INSTALLED FROM THE SOURCE FOR CUDA 11.7 by previously setting CUDA HOME and LD_LIBRARY SOMETHING VARIABLES.
# POTENTIALLY TRY OUT VERSION 2 AS WELL WHICH IS LLAMA 2 BASED

export GPUS_PER_NODE=1
#export MASTER_ADDR=$(scontrol show hostnames $SLURM_JOB_NODELIST | head -n 1) # TODO needed for multi-node setups
#export MASTER_PORT=9901
export MASTER_ADDR=$(hostname)
export MASTER_PORT=29532


srun --jobid $SLURM_JOBID python -m torch.distributed.run --nproc_per_node=$GPUS_PER_NODE --master_addr=$MASTER_ADDR --master_port=$MASTER_PORT llava/train/train_mem.py \
    --lora_enable True --bits 4 --lora_r 128 --lora_alpha 256 --mm_projector_lr 2e-5 \
    --deepspeed ./scripts/zero2.json \
    --model_name_or_path liuhaotian/llava-v1.5-7b \
    --version v1 \
    --data_path /home/guests/ege_oezsoy/Oracle/data/llava_samples/train_Falsetemp_doublemem_Falsetempaug_longshort_symbolic_doublesg_synthetic_fake_attributes_0.5_notimepoints_drophistory0.5_cot_4views.json \
    --image_folder / \
    --vision_tower openai/clip-vit-large-patch14-336 \
    --mm_projector_type mlp2x_gelu \
    --mm_vision_select_layer -2 \
    --mm_use_im_start_end False \
    --mm_use_im_patch_token False \
    --image_aspect_ratio pad \
    --group_by_modality_length True \
    --bf16 True \
    --output_dir ./checkpoints/llava-v1.5-7b-task-lora_4dor_qlora_no_weighting_symbolic_synthetic_mv_4views \
    --num_train_epochs 2 \
    --per_device_train_batch_size 8 \
    --per_device_eval_batch_size 4 \
    --gradient_accumulation_steps 2 \
    --evaluation_strategy "no" \
    --save_strategy "steps" \
    --save_steps 500 \
    --learning_rate 2e-5 \
    --max_grad_norm 0.1 \
    --weight_decay 0. \
    --warmup_ratio 0.03 \
    --lr_scheduler_type "cosine" \
    --logging_steps 1 \
    --tf32 True \
    --model_max_length 2048 \
    --gradient_checkpointing True \
    --dataloader_num_workers 4 \
    --lazy_preprocess True \
    --report_to wandb \
    --run_name llava-v1.5-7b-task-lora_4dor_qlora_no_weighting_symbolic_synthetic_mv_4views \
    --mv_type "learned" \
    --unfreeze_n_vision_tower_layers 12 \
    --do_img_order_augment

# --learning_rate 2e-5 \
# TODO is cosine learning rate really necessary?
# TODO start augmentation run
#srun --jobid $SLURM_JOBID bash -c 'python -m torch.distributed.run \ # TODO for multi-node setups
# --nproc_per_node $GPUS_PER_NODE --nnodes $SLURM_NNODES --node_rank $SLURM_PROCID \
# --master_addr $MASTER_ADDR --master_port $MASTER_PORT \
#your_program.py <normal cl args> --deepspeed ds_config.json'
